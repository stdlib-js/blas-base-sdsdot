{"version":3,"file":"index.mjs","sources":["../lib/sdsdot.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {PositiveInteger} N - number of values over which to compute the dot product\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, y, 1 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, y, strideY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ i ] * y[ i ];\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[i]*y[i] ) + ( x[i+1]*y[i+1] ) + ( x[i+2]*y[i+2] ) + ( x[i+3]*y[i+3] ) + ( x[i+4]*y[i+4] ); // eslint-disable-line max-len\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = ( 1-N ) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = ( 1-N ) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\n\n\n// VARIABLES //\n\nvar M = 5;\n\n\n// MAIN //\n\n/**\n* Computes the dot product of two single-precision floating-point vectors with extended accumulation.\n*\n* @param {integer} N - number of values over which to compute the dot product\n* @param {number} scalar - scalar constant to add to dot product\n* @param {Float32Array} x - first input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - second input array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {number} dot product of `x` and `y`\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n*\n* var z = sdsdot( x.length, 0.0, x, 1, 0, y, 1, 0 );\n* // returns -5.0\n*/\nfunction sdsdot( N, scalar, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar dot;\n\tvar ix;\n\tvar iy;\n\tvar m;\n\tvar i;\n\n\tdot = scalar;\n\tif ( N <= 0 ) {\n\t\treturn float64ToFloat32( dot );\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\t// Use unrolled loops if both strides are equal to `1`...\n\tif ( strideX === 1 && strideY === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tdot += x[ ix ] * y[ iy ];\n\t\t\t\tix += 1;\n\t\t\t\tiy += 1;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn float64ToFloat32( dot );\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tdot += ( x[ix]*y[iy] ) + ( x[ix+1]*y[iy+1] ) + ( x[ix+2]*y[iy+2] ) + ( x[ix+3]*y[iy+3] ) + ( x[ix+4]*y[iy+4] ); // eslint-disable-line max-len\n\t\t\tix += M;\n\t\t\tiy += M;\n\t\t}\n\t\treturn float64ToFloat32( dot );\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdot += x[ ix ] * y[ iy ];\n\t\tix += strideX;\n\t\tiy += strideY;\n\t}\n\treturn float64ToFloat32( dot );\n}\n\n\n// EXPORTS //\n\nexport default sdsdot;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport sdsdot from './sdsdot.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( sdsdot, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsdot;\n"],"names":["sdsdot","N","scalar","x","strideX","y","strideY","dot","ix","iy","m","i","float64ToFloat32","offsetX","offsetY","setReadOnly","ndarray"],"mappings":";;mNAoDA,SAASA,EAAQC,EAAGC,EAAQC,EAAGC,EAASC,EAAGC,GAC1C,IAAIC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAJ,EAAML,EACDD,GAAK,EACT,OAAOW,EAAkBL,GAG1B,GAAiB,IAAZH,GAA6B,IAAZE,EAAgB,CAIrC,IAHAI,EAAIT,EAtCE,GAyCG,EACR,IAAMU,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,GAAOJ,EAAGQ,GAAMN,EAAGM,GAGrB,GAAKV,EA9CC,EA+CL,OAAOW,EAAkBL,GAE1B,IAAMI,EAAID,EAAGC,EAAIV,EAAGU,GAjDd,EAkDLJ,GAASJ,EAAEQ,GAAGN,EAAEM,GAASR,EAAEQ,EAAE,GAAGN,EAAEM,EAAE,GAASR,EAAEQ,EAAE,GAAGN,EAAEM,EAAE,GAASR,EAAEQ,EAAE,GAAGN,EAAEM,EAAE,GAASR,EAAEQ,EAAE,GAAGN,EAAEM,EAAE,GAEjG,OAAOC,EAAkBL,GAY1B,IATCC,EADIJ,EAAU,GACP,EAAEH,GAAMG,EAEV,EAGLK,EADIH,EAAU,GACP,EAAEL,GAAMK,EAEV,EAEAK,EAAI,EAAGA,EAAIV,EAAGU,IACnBJ,GAAOJ,EAAGK,GAAOH,EAAGI,GACpBD,GAAMJ,EACNK,GAAMH,EAEP,OAAOM,EAAkBL,GC1C1B,SAASP,EAAQC,EAAGC,EAAQC,EAAGC,EAASS,EAASR,EAAGC,EAASQ,GAC5D,IAAIP,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAJ,EAAML,EACDD,GAAK,EACT,OAAOW,EAAkBL,GAM1B,GAJAC,EAAKK,EACLJ,EAAKK,EAGY,IAAZV,GAA6B,IAAZE,EAAgB,CAIrC,IAHAI,EAAIT,EA3CE,GA8CG,EACR,IAAMU,EAAI,EAAGA,EAAID,EAAGC,IACnBJ,GAAOJ,EAAGK,GAAOH,EAAGI,GACpBD,GAAM,EACNC,GAAM,EAGR,GAAKR,EArDC,EAsDL,OAAOW,EAAkBL,GAE1B,IAAMI,EAAID,EAAGC,EAAIV,EAAGU,GAxDd,EAyDLJ,GAASJ,EAAEK,GAAIH,EAAEI,GAAUN,EAAEK,EAAG,GAAGH,EAAEI,EAAG,GAASN,EAAEK,EAAG,GAAGH,EAAEI,EAAG,GAASN,EAAEK,EAAG,GAAGH,EAAEI,EAAG,GAASN,EAAEK,EAAG,GAAGH,EAAEI,EAAG,GAC1GD,GA1DK,EA2DLC,GA3DK,EA6DN,OAAOG,EAAkBL,GAE1B,IAAMI,EAAI,EAAGA,EAAIV,EAAGU,IACnBJ,GAAOJ,EAAGK,GAAOH,EAAGI,GACpBD,GAAMJ,EACNK,GAAMH,EAEP,OAAOM,EAAkBL,GClE1BQ,EAAAf,EAAA,UAAAgB"}